terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.0"
    }
  }
}


# Configure the AWS Provider

provider "aws" {
  region = "us-east-1"
}


# Create a VPC

variable "vpc_name" {
  description = "Name of VPC"
  type        = string
  default     = "vpc-lab-servers_mikroways"
}


resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = var.vpc_name
    Organization = "Mikroways"
  }
}


# Configure subnets

variable "public-subnet-cidrs" {
  type        = list(string)
  description = "Public Subnets CIDR"
  default     = ["10.0.101.0/24", "10.0.201.0/24"]
}

variable "availability-zones" {
  type = list(string)
  description = "Availability Zones"
  default = ["us-east-1a", "us-east-1b"]
}

resource "aws_subnet" "public-subnets" {
  count = length(var.public-subnet-cidrs)
  vpc_id     = aws_vpc.main.id
  cidr_block = var.public-subnet-cidrs[count.index]
  availability_zone = var.availability-zones[count.index]

  tags = {
    Name = "public-subnet-${count.index + 1}_${var.availability-zones[count.index]}_${var.vpc_name}"
    Organization = "Mikroways"
  }
}


# Configure Internet Gateway

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "igw_${var.vpc_name}"
    Organization = "Mikroways"
  }
}


# Configure public routing table 

resource "aws_route_table" "public-routing-table" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name = "public-routing-table_${var.vpc_name}"
    Organization = "Mikroways"
  }
}


# Associate public subnets with public-routing-table

resource "aws_route_table_association" "public-subnet-association" {
  count = length(var.public-subnet-cidrs)
  subnet_id = aws_subnet.public-subnets[count.index].id
  route_table_id = aws_route_table.public-routing-table.id
}


# Configure a security group 


variable "my-public-ip" {
  type        = string
  description = "Value of my public IP for allow access to resources"
  default     = "<ip-public>/<netmask>"
}


resource "aws_security_group" "main" {
  name        = "secgrp_${var.vpc_name}"
  description = "Security rules as request in the Practice Work"
  vpc_id      = aws_vpc.main.id

  tags = {
    Name = "secgrp_${var.vpc_name}"
    Organization = "Mikroways"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow-ssh" {
  security_group_id = aws_security_group.main.id
  cidr_ipv4         = var.my-public-ip
  ip_protocol       = "tcp"
  from_port         = 22
  to_port           = 22
}

resource "aws_vpc_security_group_ingress_rule" "allow-http-to-all" {
  security_group_id = aws_security_group.main.id
  cidr_ipv4         = var.my-public-ip # modificar esto luego
  ip_protocol       = "tcp"
  from_port         = 80
  to_port           = 80
}

resource "aws_vpc_security_group_ingress_rule" "allow-icmp" {
  security_group_id = aws_security_group.main.id
  cidr_ipv4         = var.my-public-ip
  ip_protocol       = "icmp"
  from_port         = -1
  to_port           = -1
}


#### EC2

# Configure SSH key pair

resource "aws_key_pair" "user-public-key" {
  key_name   = "mcanaza-public-key"
  public_key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHtsDTrBlj5M+jg+vqFoK6oHnmtLrbXWViBZOhWo4kex mortzkeb@gmail.com"
}

# Creating a EC2 instance

resource "aws_instance" "ec2-instance-1" {
  ami           = "ami-08a6efd148b1f7504"  # Amazon Linux 2023 Kernel 6.1 64 bits
  instance_type = "t2.micro"
  key_name = aws_key_pair.user-public-key.id
  associate_public_ip_address = true
  subnet_id = aws_subnet.public-subnets[0].id
  vpc_security_group_ids = [aws_security_group.main.id]
  tags = {
    Name = "ec2-instance-1_${var.vpc_name}"
    Organization = "Mikroways"
  }
}

# outputs 

output "vpc_id" {
  description = "ID de la VPC creada"
  value       = aws_vpc.main.id
}

output "public_subnet_ids" {
  description = "IDs de las subredes públicas"
  value       = [
    for subnet in aws_subnet.public-subnets : {
      id = subnet.id
      cidr_block = subnet.cidr_block
    }
  ]
}

output "ec2_instance_public_ip" {
  description = "IP pública de la instancia EC2"
  value       = aws_instance.ec2-instance-1.public_ip
}

